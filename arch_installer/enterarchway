#!/usr/bin/env bash
# TODO::DONE: Fix not mounting root bug.
# TODO::DONE: Fix not turning swap on.
# TODO::DONE: Fix cfdisk menu option.
# TODO: Keep testing it until it is easy to use.
# TODO::DONE: Add lsblk after cfdisk.
# TODO: Put everything in a function, IE Functionize.
# TODO: Test for Legacy and fix any problems with Legacy install.
# TODO:DONE: Fix line 85 syntax error on Package Install Script

clear;
EFI=0;

# Generate another install script for after chrooting
function generate_package_script() {
  echo "
  #!/bin/bash

  # Install Xorg.
  echo 'Installing Xorg...';
  sleep 2;
  pacman -S xorg xterm xorg-xinit;

  echo 'Choose your desktop manager: ';
  DE=('GNOME', 'Cinnamon', 'MATE', 'LXDE', 'KDE', 'None');

  # Choose a desktop environment
  select DESKTOP_ENV in \${DE[@]};do
    case \$DESKTOP_ENV in
      'GNOME,')
        echo 'Installing GNOME...';
        sleep 2
        pacman -S gnome gnome-extra networkmanager;
        break;
        ;;

      'Cinnamon,')
        echo 'Installing Cinnamon...';
        sleep 2;
        pacman -S cinnamon gnome-terminal networkmanager;
        break;
        ;;

      'MATE,')
        echo 'Installing MATE...';
        sleep 2;
        pacman -S mate mate-extra networkmanager;
        break;
        ;;

      'LXDE,')
        echo 'Installing LXDE...';
        sleep 2
        pacman -S lxde networkmanager;
        break;
        ;;

      'KDE,')
        echo 'Installing KDE...'
        sleep 2
        pacman -S plasma networkmanager;
        break;
        ;;

      'None')
        echo 'Skipping Desktop Environment';
        break;
        ;;

      *)
        echo 'Invalid Option!';
        ;;
    esac
  done;

  # Set hostname
  echo 'What would you like your hostname to be? (EX. Archey)';
  read hostname;
  echo \$hotname > /etc/hostname;
  clear;

  # Set Timezone
  echo 'Start timezone settings...';
  sleep 2;
  TIME_ZONE_COUNTRIES=(/usr/share/zoneinfo/*);

  echo 'Choose a timezone country: ';
  select TIMEZONE_REGION in \${TIME_ZONE_COUNTRIES[@]};do
    echo 'You selected ' \$TIMEZONE_REGION;
    echo 'Select a timezone region.';
    break;
  done;

  select TIMEZONE in \$TIMEZONE_REGION/*;do
    echo 'Your time zone is ' \$TIMEZONE;
    ln -sf \$TIMEZONE /etc/localtime;
    echo 'timezone set...';
    break;
  done;

  hwclock --systohc;
  clear;

  # Select and generate locale
  echo 'Select your desired locale...'
  sleep 2;
  clear;
  nano /etc/locale.gen;
  locale-gen
  echo 'What is your locale? (EX. en_US.UTF-8)';
  read locale
  echo LANG=\$locale > /etc/locale.conf
  clear;

  # Set password
  echo 'Set a root password...';
  sleep 2
  passwd;
  " > installpkgs;

  chmod +x ./installpkgs;
  mv ./installpkgs /mnt/;
}

function ask() {
  echo -n "$1";
  read input;
}
# Check if ran as root
if [ $EUID != 0 ]; then
  echo "Script must be ran as root.";
  exit;
fi

echo "------------------------------------------------------------------";
echo "-  WELCOME TO ENTERARCHWAY - MY FIRST ARCHLINUX INSTALL SCRIPT!  -";
echo "------------------------------------------------------------------";
# Check for efi
if [ -d /sys/firmware/efi ]; then
  EFI=1;
  echo "You are in UEFI boot mode.";
else
  echo "You are in Legacy boot mode";
fi

# Get devs in /dev
for file in /dev/sd?;
do
    #DEVICE_ARR=("${DEVICE_ARR[@]}" "$file")   # Add devs to array.
    DEVICE_ARR+=($file);
done

echo "Choose device to format: ";

select device in ${DEVICE_ARR[@]}; do
  echo "You picked " $device;
  break;
done

clear

#Partition drives
if [ $EFI -eq 1 ];then
  echo "###################################################################################";
  echo "REMEMBER! you are booted in UEFI mode and must include an 'EFI System Partition!'";
  echo "###################################################################################";
else
  echo "###################################################################################";
  echo "REMEMBER! you are booted in Legacy mode and must include a BIOS Boot Partition";
  echo "###################################################################################";
fi
echo "Would you like to open cfdisk? (y,n)";
read open_formatter;
if [ "$open_formatter" == 'y' ] || [ "$open_formatter" == "" ];then
  echo "Starting cfdisk for " $device;
  sleep 1;
  cfdisk -z $device;
else
  exit;
fi

clear;

# Get partitions, format and mount them.

# Get root partition
lsblk
echo "What is your root partition?: " $device;
read root_part;
ROOT=$device$root_part;
echo "Your root partition is " $ROOT;

clear

# Get Boot Partition
lsblk
echo "What is your boot partition?: " $device;
read boot_part;
BOOT_PART=$device$boot_part;

clear

# Get Home Partition
lsblk
echo "What is your Home partition?: " $device;
read home_part;
HOME_PART=$device$home_part;

clear

# Get Swap Partition
lsblk
echo "What is your swap?: " $device;
read swap_part;
SWAP_PART=$device$swap_part;

clear

echo "------------------------------------------------";
echo " PARTITION LAYOUT";
echo "Root Partition: " $ROOT;
echo "Boot Partition: " $BOOT_PART;
echo "Home Partition: " $HOME_PART;
echo "Swap Partition: " $SWAP_PART;
echo "------------------------------------------------";

ask "THIS WILL DELETE EVERYTHING!  Do you want to format " $device"? (y, n)";

if [ "$input" == "y" ] || [ "$input" == "" ];then
  # Format partitions
  if [ $EFI -eq 1 ];then
    echo "Formatting for EFI Boot Partition.";
    mkfs.fat -F32 $BOOT_PART;
  fi

  echo "Formatting Root partition.";
  mkfs.ext4 -F $ROOT;

  echo "Formatting Home Partition.";
  mkfs.ext4 -F $HOME_PART;

  echo "Creating Swap Partition.";
  mkswap -f $SWAP_PART;
else
  exit;
fi

# Mount partitions
echo "Mounting Partitions..."
sleep 2;

swapon $SWAP_PART;
mount $ROOT /mnt;
mkdir /mnt/home;
mount $HOME_PART /mnt/home;
mkdir /mnt/boot;
mount $BOOT_PART /mnt/boot;

lsblk
ask "Partitions are mounted...Does everything look correct? (y, n)"

if [ "$input" == "y" ] || [ "$input" == "" ];then
  # Rank mirrors
  #echo "Ranking Mirrors by connection speed.";
  clear;
  echo "Ranking mirror connections...Please Wait.  NOTE: This can take a while.";
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.back;
  rankmirrors /etc/pacman.d/mirrorlist > /etc/pacman.d/mirrorlist.back;
  mv /etc/pacman.d/mirrorlist.back /etc/pacman.d/mirrorlist;
fi

# Install base
echo "Start Install? (y,n)";
read START_INSTALL;
if [ "$START_INSTALL" == "y" ] || [ "$START_INSTALL" == "Y" ] || [ "$START_INSTALL" == "" ];then
  pacstrap /mnt base base-devel
  clear

  echo "Generating fstab in /etc/fstab";
  genfstab -U /mnt > /mnt/etc/fstab;

  echo "Generating package install script.";
  generate_package_script;
  echo "####################################################################################################################";
  echo "Don't forget to run the Package Install Script when you chroot to get a basic gui working!  (EX.'./installpkgs')"
  ask "Would you like to chroot into the new system (y, n)";
  echo "####################################################################################################################";
  read $input;

  if [ "$input" == "y" ] || [ "$input" == "" ];then
    arch-chroot /mnt;
  else
    exit;
  fi

else
  echo "Closing...";
  exit;
fi
